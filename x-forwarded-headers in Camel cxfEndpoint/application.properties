camel.springboot.name=camel
server.address=0.0.0.0
management.address=0.0.0.0
server.port=8084
server.forward-headers-strategy=native
management.port=8083
# disable all management endpoints except health
endpoints.enabled=false
endpoints.health.enabled=true
management.endpoint.health.probes.enabled=true
management.endpoints.web.exposure.include=health
spring.main.web-application-type=none
camel.springboot.main-run-controller=true
cxf.servlet.init.use-x-forwarded-headers=true
cxf.host=http://0.0.0.0
cxf.port=8085
api.rest.host=0.0.0.0
api.rest.port=8090
# The URI for the SERFF Services at Plan Management
cxf.pm.serff.uri=${PM_SERFF_URI}
spring.datasource.url=${DATASOURCE_URL}
spring.datasource.username=${DATASOURCE_USERNAME}
spring.datasource.password=${DATASOURCE_PASSWORD}
spring.datasource.hikari.schema=${DATASOURCE_SCHEMA}
# Flyway
spring.flyway.enabled=true
spring.flyway.create-schemas=true
spring.flyway.default-schema=${DATASOURCE_SCHEMA}
spring.flyway.schemas=${DATASOURCE_SCHEMA}
spring.flyway.locations=classpath:db/migration
#VLP Determination
api.rest.endpoint.vlpdetermination=/VLP
#VLP1
api.rest.endpoint.vlp1=/VLP1
#VLP1A
api.rest.endpoint.vlp1a=/VLP1A
#VLP1B
api.rest.endpoint.vlp1b=/VLP1B
#VLP2
api.rest.endpoint.vlp2=/VLP2
#VLPRCR
api.rest.endpoint.vlprcr=/VLPRCR
#VLPClose
api.rest.endpoint.vlpclose=/VLPClose
vlp.service.url=${VLP_SERVICE_URL}
env.external.mode=real
#Endpoints
eci.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/CurrentIncome?WSDL
eci.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/CurrentIncome?WSDL
vahi.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/AnnualIncome?WSDL
vahi.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/AnnualIncome?WSDL
smarty.streets.endpoint.real=https://us-street.api.smartystreets.com/street-address
nonesi.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/NonESI?WSDL
nonesi.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/NonESI?WSDL
ssa.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/SSA?WSDL
ssa.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/SSA?WSDL
aptc.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/CalculateMaxAPTC?WSDL
aptc.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/CalculateMaxAPTC?WSDL
ridp.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/RIDP?WSDL
ridp.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/RIDP?WSDL
vlp1.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/VerifyLawfulPresenceServiceV37?WSDL
vlp1.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/VerifyLawfulPresenceServiceV37?WSDL
vlp2.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/InitiateAdditionalVerification?WSDL
vlp2.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/InitiateAdditionalVerification?WSDL
vlprcr.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/RetrieveCaseStep2Resolution?WSDL
vlprcr.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/RetrieveCaseStep2Resolution?WSDL
vlpclose.endpoint.mock=http://${MOCK_HOST}:${MOCK_PORT}/CloseCaseService?WSDL
vlpclose.endpoint.real=http://${MOCK_HOST}:${MOCK_PORT}/CloseCaseService?WSDL
cdst.endpoint.savehousehold=${CDST_MICROSERVICE_URL}/households
cdst.endpoint.gethousehold=${CDST_MICROSERVICE_URL}/households/{householdId}
cdst.endpoint.getreferencedata=${CDST_MICROSERVICE_URL}/referencedata
cdst.endpoint.searchproviders=${CDST_MICROSERVICE_URL}/providers
cdst.endpoint.drugs=${CDST_MICROSERVICE_URL}/drugs
cdst.endpoint.dosages=${CDST_MICROSERVICE_URL}/dosages
Cl_Eligibility_EligibilityResponse=HbxEligibilityServices/ws/hbxEligibilityResponse
Sv_Eligibility_Servicehost=${RULE_ENGINE_HOST}:${RULE_ENGINE_PORT}
Sv_Eligibility_hbxEligibilityService=${ES_ENDPOINT_SERVICE:HbxEligibilityServices/ws/hbxEligibilityResponse}
Sv_Eligibility_hbxEligibilityResponse=HbxEligibilityServices/ws/hbxEligibilityResponse
Audit_ES_Route=${AUDIT_ES_RROUTE:true}
Cl_Eligibility_PreScreening=HbxPreScreeningServices/ws/hbxPreScreeningResponse
Sv_Eligibility_PreScreening=HbxPreScreeningServices/ws/hbxPreScreeningResponse
Audit_PS_Route=${AUDIT_PS_RROUTE:true}
Cl_Eligibility_MaxAptcAmount=HbxMaxAptcAmountServices/ws/hbxMaxAptcAmountResponse
Sv_Eligibility_MaxAptcAmount=HbxMaxAptcAmountServices/ws/hbxMaxAptcAmountResponse
Audit_MaxAPTC_Route=${AUDIT_MAXAPTC_RROUTE:true}
Cl_Eligibility_SpecialEnrollment=HbxSpecialEnrollmentServices/ws/hbxSpecialEnrollmentResponse
Sv_Eligibility_SpecialEnrollment=HbxSpecialEnrollmentServices/ws/hbxSpecialEnrollmentResponse
Audit_SEP_Route=${AUDIT_SEP_RROUTE:true}
Cl_Eligibility_ShoppingFlowRestriction=HbxShoppingFlowRestrictionServices/ws/hbxShoppingFlowRestrictionResponse
Sv_Eligibility_ShoppingFlowRestriction=HbxShoppingFlowRestrictionServices/ws/hbxShoppingFlowRestrictionResponse
Audit_SR_Route=${AUDIT_SR_RROUTE:true}
Cl_Eligibility_DocumentRequest=HbxDocumentRequestServices/ws/hbxDocumentRequestResponse
Sv_Eligibility_DocumentRequest=HbxDocumentRequestServices/ws/hbxDocumentRequestResponse
Audit_DocVerif_Route=${AUDIT_DOCVERIF_RROUTE:true}
#carrier-pay-now
certifcteName=int-ws.deloitteinnovation.space
certifcteAlisName=int-ws.deloitteinnovation.space
certifctePass=healthchoice
clientKeyPath=/opt/keystore/healthchoice.jks
clientKeyPass=changeit
authCodeClass=urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
newSamlFenId=23371,58105,14057,16955
kaiserFednIs=23371
nameID=wahpf
authCodeClassNew=urn:oasis:names:tc:SAML:2.0:ac:classes:PasswordProtectedTransport
authCodeClassOld=urn:oasis:names:tc:SAML:2.0:ac:classes:Password
kaiserUrl=https://sso.healthplan.com/sp/ACS.saml2
#Routes to always start : comma separated list of routes (No space post comma)
routesToAlwaysStart=errorResponse_route
#Whether all routes will start automatically during application startup (true/false)
autoStartRoutes=${AUTO_START_ROUTES:true}
#Routes Needs to be started: comma separated list of routes (No space post comma)
routesToStart=${ROUTES_TO_START}
#jasypt configuration for encryption
jasypt.encryptor.algorithm=PBEWITHHMACSHA512ANDAES_256
jasypt.encryptor.iv-generator-classname=org.jasypt.iv.RandomIvGenerator
jasypt.encryptor.password=${ENCRYPTION_KEY}
#Health checks
app.health=/actuator/health
app.health.readiness=/actuator/health/readiness
app.health.liveness=/actuator/health/liveness